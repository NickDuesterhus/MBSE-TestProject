/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Normalvector;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Normalvector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NormalvectorImpl#getX1 <em>X1</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NormalvectorImpl#getX2 <em>X2</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NormalvectorImpl#getX3 <em>X3</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NormalvectorImpl extends MinimalEObjectImpl.Container implements Normalvector
{
  /**
   * The default value of the '{@link #getX1() <em>X1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX1()
   * @generated
   * @ordered
   */
  protected static final float X1_EDEFAULT = 0.0F;

  /**
   * The cached value of the '{@link #getX1() <em>X1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX1()
   * @generated
   * @ordered
   */
  protected float x1 = X1_EDEFAULT;

  /**
   * The default value of the '{@link #getX2() <em>X2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX2()
   * @generated
   * @ordered
   */
  protected static final float X2_EDEFAULT = 0.0F;

  /**
   * The cached value of the '{@link #getX2() <em>X2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX2()
   * @generated
   * @ordered
   */
  protected float x2 = X2_EDEFAULT;

  /**
   * The default value of the '{@link #getX3() <em>X3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX3()
   * @generated
   * @ordered
   */
  protected static final float X3_EDEFAULT = 0.0F;

  /**
   * The cached value of the '{@link #getX3() <em>X3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX3()
   * @generated
   * @ordered
   */
  protected float x3 = X3_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NormalvectorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.NORMALVECTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public float getX1()
  {
    return x1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setX1(float newX1)
  {
    float oldX1 = x1;
    x1 = newX1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.NORMALVECTOR__X1, oldX1, x1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public float getX2()
  {
    return x2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setX2(float newX2)
  {
    float oldX2 = x2;
    x2 = newX2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.NORMALVECTOR__X2, oldX2, x2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public float getX3()
  {
    return x3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setX3(float newX3)
  {
    float oldX3 = x3;
    x3 = newX3;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.NORMALVECTOR__X3, oldX3, x3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.NORMALVECTOR__X1:
        return getX1();
      case MyDslPackage.NORMALVECTOR__X2:
        return getX2();
      case MyDslPackage.NORMALVECTOR__X3:
        return getX3();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.NORMALVECTOR__X1:
        setX1((Float)newValue);
        return;
      case MyDslPackage.NORMALVECTOR__X2:
        setX2((Float)newValue);
        return;
      case MyDslPackage.NORMALVECTOR__X3:
        setX3((Float)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NORMALVECTOR__X1:
        setX1(X1_EDEFAULT);
        return;
      case MyDslPackage.NORMALVECTOR__X2:
        setX2(X2_EDEFAULT);
        return;
      case MyDslPackage.NORMALVECTOR__X3:
        setX3(X3_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NORMALVECTOR__X1:
        return x1 != X1_EDEFAULT;
      case MyDslPackage.NORMALVECTOR__X2:
        return x2 != X2_EDEFAULT;
      case MyDslPackage.NORMALVECTOR__X3:
        return x3 != X3_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (x1: ");
    result.append(x1);
    result.append(", x2: ");
    result.append(x2);
    result.append(", x3: ");
    result.append(x3);
    result.append(')');
    return result.toString();
  }

} //NormalvectorImpl
