/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SolidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Solid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Keyword cEndsolidKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Solid:
		//	'solid'
		//	name=ID
		//	facets+=Facet+
		//	'endsolid'
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'solid' name=ID facets+=Facet+ 'endsolid' ID
		public Group getGroup() { return cGroup; }
		
		//'solid'
		public Keyword getSolidKeyword_0() { return cSolidKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//facets+=Facet+
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }
		
		//Facet
		public RuleCall getFacetsFacetParserRuleCall_2_0() { return cFacetsFacetParserRuleCall_2_0; }
		
		//'endsolid'
		public Keyword getEndsolidKeyword_3() { return cEndsolidKeyword_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }
	}
	public class FacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Facet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFacetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNormalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNormalNormalvectorParserRuleCall_1_0 = (RuleCall)cNormalAssignment_1.eContents().get(0);
		private final Keyword cOuterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLoopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cV1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cV1VectorParserRuleCall_4_0 = (RuleCall)cV1Assignment_4.eContents().get(0);
		private final Assignment cV2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cV2VectorParserRuleCall_5_0 = (RuleCall)cV2Assignment_5.eContents().get(0);
		private final Assignment cV3Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cV3VectorParserRuleCall_6_0 = (RuleCall)cV3Assignment_6.eContents().get(0);
		private final Keyword cEndloopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEndfacetKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Facet:
		//	'facet'
		//	normal=Normalvector
		//	'outer' 'loop'
		//	v1=Vector v2=Vector v3=Vector
		//	'endloop'
		//	'endfacet';
		@Override public ParserRule getRule() { return rule; }
		
		//'facet' normal=Normalvector 'outer' 'loop' v1=Vector v2=Vector v3=Vector 'endloop' 'endfacet'
		public Group getGroup() { return cGroup; }
		
		//'facet'
		public Keyword getFacetKeyword_0() { return cFacetKeyword_0; }
		
		//normal=Normalvector
		public Assignment getNormalAssignment_1() { return cNormalAssignment_1; }
		
		//Normalvector
		public RuleCall getNormalNormalvectorParserRuleCall_1_0() { return cNormalNormalvectorParserRuleCall_1_0; }
		
		//'outer'
		public Keyword getOuterKeyword_2() { return cOuterKeyword_2; }
		
		//'loop'
		public Keyword getLoopKeyword_3() { return cLoopKeyword_3; }
		
		//v1=Vector
		public Assignment getV1Assignment_4() { return cV1Assignment_4; }
		
		//Vector
		public RuleCall getV1VectorParserRuleCall_4_0() { return cV1VectorParserRuleCall_4_0; }
		
		//v2=Vector
		public Assignment getV2Assignment_5() { return cV2Assignment_5; }
		
		//Vector
		public RuleCall getV2VectorParserRuleCall_5_0() { return cV2VectorParserRuleCall_5_0; }
		
		//v3=Vector
		public Assignment getV3Assignment_6() { return cV3Assignment_6; }
		
		//Vector
		public RuleCall getV3VectorParserRuleCall_6_0() { return cV3VectorParserRuleCall_6_0; }
		
		//'endloop'
		public Keyword getEndloopKeyword_7() { return cEndloopKeyword_7; }
		
		//'endfacet'
		public Keyword getEndfacetKeyword_8() { return cEndfacetKeyword_8; }
	}
	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVertexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cX1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cX1FLOATTerminalRuleCall_1_0 = (RuleCall)cX1Assignment_1.eContents().get(0);
		private final Assignment cX2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cX2FLOATTerminalRuleCall_2_0 = (RuleCall)cX2Assignment_2.eContents().get(0);
		private final Assignment cX3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cX3FLOATTerminalRuleCall_3_0 = (RuleCall)cX3Assignment_3.eContents().get(0);
		
		//Vector:
		//	'vertex' x1=FLOAT x2=FLOAT x3=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//'vertex' x1=FLOAT x2=FLOAT x3=FLOAT
		public Group getGroup() { return cGroup; }
		
		//'vertex'
		public Keyword getVertexKeyword_0() { return cVertexKeyword_0; }
		
		//x1=FLOAT
		public Assignment getX1Assignment_1() { return cX1Assignment_1; }
		
		//FLOAT
		public RuleCall getX1FLOATTerminalRuleCall_1_0() { return cX1FLOATTerminalRuleCall_1_0; }
		
		//x2=FLOAT
		public Assignment getX2Assignment_2() { return cX2Assignment_2; }
		
		//FLOAT
		public RuleCall getX2FLOATTerminalRuleCall_2_0() { return cX2FLOATTerminalRuleCall_2_0; }
		
		//x3=FLOAT
		public Assignment getX3Assignment_3() { return cX3Assignment_3; }
		
		//FLOAT
		public RuleCall getX3FLOATTerminalRuleCall_3_0() { return cX3FLOATTerminalRuleCall_3_0; }
	}
	public class NormalvectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Normalvector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNormalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cX1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cX1FLOATTerminalRuleCall_1_0 = (RuleCall)cX1Assignment_1.eContents().get(0);
		private final Assignment cX2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cX2FLOATTerminalRuleCall_2_0 = (RuleCall)cX2Assignment_2.eContents().get(0);
		private final Assignment cX3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cX3FLOATTerminalRuleCall_3_0 = (RuleCall)cX3Assignment_3.eContents().get(0);
		
		//Normalvector:
		//	'normal' x1=FLOAT x2=FLOAT x3=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//'normal' x1=FLOAT x2=FLOAT x3=FLOAT
		public Group getGroup() { return cGroup; }
		
		//'normal'
		public Keyword getNormalKeyword_0() { return cNormalKeyword_0; }
		
		//x1=FLOAT
		public Assignment getX1Assignment_1() { return cX1Assignment_1; }
		
		//FLOAT
		public RuleCall getX1FLOATTerminalRuleCall_1_0() { return cX1FLOATTerminalRuleCall_1_0; }
		
		//x2=FLOAT
		public Assignment getX2Assignment_2() { return cX2Assignment_2; }
		
		//FLOAT
		public RuleCall getX2FLOATTerminalRuleCall_2_0() { return cX2FLOATTerminalRuleCall_2_0; }
		
		//x3=FLOAT
		public Assignment getX3Assignment_3() { return cX3Assignment_3; }
		
		//FLOAT
		public RuleCall getX3FLOATTerminalRuleCall_3_0() { return cX3FLOATTerminalRuleCall_3_0; }
	}
	
	
	private final SolidElements pSolid;
	private final FacetElements pFacet;
	private final VectorElements pVector;
	private final NormalvectorElements pNormalvector;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSolid = new SolidElements();
		this.pFacet = new FacetElements();
		this.pVector = new VectorElements();
		this.pNormalvector = new NormalvectorElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Solid:
	//	'solid'
	//	name=ID
	//	facets+=Facet+
	//	'endsolid'
	//	ID;
	public SolidElements getSolidAccess() {
		return pSolid;
	}
	
	public ParserRule getSolidRule() {
		return getSolidAccess().getRule();
	}
	
	//Facet:
	//	'facet'
	//	normal=Normalvector
	//	'outer' 'loop'
	//	v1=Vector v2=Vector v3=Vector
	//	'endloop'
	//	'endfacet';
	public FacetElements getFacetAccess() {
		return pFacet;
	}
	
	public ParserRule getFacetRule() {
		return getFacetAccess().getRule();
	}
	
	//Vector:
	//	'vertex' x1=FLOAT x2=FLOAT x3=FLOAT;
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}
	
	//Normalvector:
	//	'normal' x1=FLOAT x2=FLOAT x3=FLOAT;
	public NormalvectorElements getNormalvectorAccess() {
		return pNormalvector;
	}
	
	public ParserRule getNormalvectorRule() {
		return getNormalvectorAccess().getRule();
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	'-' | '.' | 'e' | INT+;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
