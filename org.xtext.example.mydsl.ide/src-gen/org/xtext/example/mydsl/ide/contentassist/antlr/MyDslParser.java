/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSolidAccess().getGroup(), "rule__Solid__Group__0");
			builder.put(grammarAccess.getFacetAccess().getGroup(), "rule__Facet__Group__0");
			builder.put(grammarAccess.getVectorAccess().getGroup(), "rule__Vector__Group__0");
			builder.put(grammarAccess.getNormalvectorAccess().getGroup(), "rule__Normalvector__Group__0");
			builder.put(grammarAccess.getSolidAccess().getNameAssignment_1(), "rule__Solid__NameAssignment_1");
			builder.put(grammarAccess.getSolidAccess().getFacetsAssignment_2(), "rule__Solid__FacetsAssignment_2");
			builder.put(grammarAccess.getFacetAccess().getNormalAssignment_1(), "rule__Facet__NormalAssignment_1");
			builder.put(grammarAccess.getFacetAccess().getV1Assignment_4(), "rule__Facet__V1Assignment_4");
			builder.put(grammarAccess.getFacetAccess().getV2Assignment_5(), "rule__Facet__V2Assignment_5");
			builder.put(grammarAccess.getFacetAccess().getV3Assignment_6(), "rule__Facet__V3Assignment_6");
			builder.put(grammarAccess.getVectorAccess().getX1Assignment_1(), "rule__Vector__X1Assignment_1");
			builder.put(grammarAccess.getVectorAccess().getX2Assignment_2(), "rule__Vector__X2Assignment_2");
			builder.put(grammarAccess.getVectorAccess().getX3Assignment_3(), "rule__Vector__X3Assignment_3");
			builder.put(grammarAccess.getNormalvectorAccess().getX1Assignment_1(), "rule__Normalvector__X1Assignment_1");
			builder.put(grammarAccess.getNormalvectorAccess().getX2Assignment_2(), "rule__Normalvector__X2Assignment_2");
			builder.put(grammarAccess.getNormalvectorAccess().getX3Assignment_3(), "rule__Normalvector__X3Assignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
